


kth smallest mtlb ek no diya hoga uspe btana hai kuan saa element hai tree ka uss kth place par smallest mtlb agee seee jaoge na bst hai sorted order meeh 
approach 1:-   tree ka inorder traversal nikal lo bst ka vector meeh inorader hai bst ka to sorted hi hoga 
abb manlo aissa kuch aya  v=[ 1  2  3  4  5  6  7]   aur k=2 diya hai   mtlb 
v[2] index return krdo 3 ho jaega ans kth smallest element

#BRUTEFORCE inorder nikal ke k search krlo vector meeh -1 isliye kiya kyuki return question meeh 0 th based indexing nhi hai 1 based ha aur sol 0 th based index par hai
void ino(BinaryTreeNode<int>* root,vector<int> &store)
{
    if(root==NULL)
    {
        return;
    }
    ino(root->left,store);
    store.push_back(root->data);
    ino(root->right,store);
   
}
int kthSmallest(BinaryTreeNode<int>* root, int k) {
    // Write your code here.
    vector<int>store;
     ino(root,store);
    if(k>store.size())
        return -1;
    return store[k-1];
}
TC:- O(n) hai kyuki hum inorder nikal kr vector meeh bhar rhe hai har item par ek ek baar traverse kr rhe hai n item par n time to O(n).
SC:- O(n) kyuki ek vector li liya


APPROACH 2:- k=3 diya hai manlo to inorder traversal kro aur --k krte jao agar kisi point par k==0 hogya mtlb whi value nikalni hai
-------------------------------------------------------------------------------------------------------------------------------------------------------------



class Solution {
  public:
    // Return the Kth smallest element in the given BST
    void check(Node* root,int &ans,int &k)
    {
        if(root==NULL)
        {
            return;
        }
        
        check(root->left,ans,k);
        if(--k==0)//   k manlo 3 hai to jab yha aega to pehle minus minus hoga fir check krega ki 0 hai ya nhi pre kehte agar pehle symbol milla to
        {
            ans=root->data;
            return;
        }
        
        check(root->right,ans,k);
    }
    int KthSmallestElement(Node *root, int K) {
        // add code here.
        int ans=-1;
        check(root,ans,K);
        return ans;
    }
};
