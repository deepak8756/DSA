




-------------------------------------------------------------------------------------------------------------------------------------------------------------
Bruteforce O(n)2:-

#include<bits/stdc++.h>
using namespace std;

int main()
{
    int n;
    cin>>n;
    vector<int> v;
    for(int i=0;i<n;i++)
    {
        int x;
        cin>>x;
        v.push_back(x);
    }

    //----------2 1 5 6 2 3------------  iss input par chla lo

    int ans=0;
    for(int i=0;i<n;i++)   //ye main loop hai 
    {
    //pehle jiss index par hai uss index ko current meeh add krdo fir uske left right wale bdde ya brabar hue to utne hi times add krte chle jao mtlb ki wo box left right phailta ja rha hai
        int curr=v[i];   //jiss index ko le rhe hai pehle usko current meeh push krdo fir niche uss index ke left right meeh check krlenge ki usse bdde ya brabar hai agar 
                          //left pura ya jha takk bhi same for right tabhi to ageee jaega manlo 2 ke left meeh 1 hai to 2 -> 1 ke andar kaise smaega 2 ki height 1 see bddi hai  isliye bdaa ya brabar rhe left bhi right bhi
                          for ex:- mere pass 2 box hai ek ki size:- 3 ek ki size:- 5 || to 3 wala 5 ke andar to ajega lekin 5 wala 3 ke andar kaise smaega
        for(int j=i-1;j>=0;j--)  // ye loop har i ke left meeh jake check krega tab taak jab tak i ki value see bddi ya brabar uske left meeh mill rhi hai 
                                //current meeh add krta jaega agar koi bhi value left meeh given ith index see chotti milli to break
        {
            if(v[j]>=v[i])
            {
                curr+=v[i];
            }
            else{
                break;
            }
        }

        for(int k=i+1;k<n;k++)// ye loop har i ke right meeh jake check krega tab taak jab tak i ki value see bddi ya brabar uske right meeh mill rhi hai 
                                //current meeh add krta jaega agar koi bhi value right meeh given ith index see chotti milli to break
        {
             if(v[k]>=v[i])
            {
                curr+=v[i];
            }
            else{
                break;
            }
        }
        ans=max(ans,curr);   //ab ans aur jo current abhi aya usse compare kralo kaun saa bdda hai wii ans meeh daldo
    }
    cout<<ans<<endl;
    return 0;
}
-------------------------------------------------------------------------------------------------------------------------------------------------------------


public:
    //Function to find largest rectangular area possible in a given histogram.
    vector<long long> prevsmaller(long long *arr,int n)
    {
        vector<long long>ans;
        stack<int>s;
        
        for(int i=0;i<n;i++)
        {
            if(s.empty())
            {
                ans.push_back(-1);
            }
            else if(s.size()>0 && arr[s.top()]<arr[i])
            {
                ans.push_back(s.top());
            }
            else if(s.size()>0 && arr[s.top()]>=arr[i])
            {
                while(s.size()>0 && arr[s.top()]>=arr[i])
                {
                    s.pop();
                }
                if(s.size()==0)
                {
                    ans.push_back(-1);
                }
                else{
                    ans.push_back(s.top());
                }
            }
            s.push(i);
        }
        return ans;
    }
    
    vector<long long> nextsmaller(long long *arr,int n)
    {
        vector<long long>ans;
        stack<int>s;
        
        for(int i=n-1;i>=0;i--)
        {
            if(s.size()==0)
            {
                ans.push_back(n);  //agar nhi milla to size daldo array ki uss index ko point krega
            }
            else if(s.size()>0 && arr[s.top()]<arr[i])
            {
                ans.push_back(s.top());
            }
            else if(s.size()>0 && arr[s.top()]>=arr[i])
            {
                while(s.size()>0 && arr[s.top()]>=arr[i])
                {
                    s.pop();
                }
                if(s.empty())
                {
                    ans.push_back(n);  //yha bhi
                }
                else{
                    ans.push_back(s.top());
                }
            }
            s.push(i);
        }
        reverse(ans.begin(),ans.end());
        return ans;
    }
    
    long long getMaxArea(long long arr[], int n)
    {
        // Your code here
        long long res=0;
        vector<long long>ps=prevsmaller(arr,n);
        vector<long long>ns=nextsmaller(arr,n);
        
        for(int i=0;i<n;i++)
        {
            long long curr=(ns[i]-ps[i]-1)*arr[i];
            res=max(res,curr);
        }
        return res;
        
    }
};
public:
    //Function to find largest rectangular area possible in a given histogram.
    vector<long long> prevsmaller(long long *arr,int n)
    {
        vector<long long>ans;
        stack<int>s;
        
        for(int i=0;i<n;i++)
        {
            if(s.empty())
            {
                ans.push_back(-1);
            }
            else if(s.size()>0 && arr[s.top()]<arr[i])
            {
                ans.push_back(s.top());
            }
            else if(s.size()>0 && arr[s.top()]>=arr[i])
            {
                while(s.size()>0 && arr[s.top()]>=arr[i])
                {
                    s.pop();
                }
                if(s.size()==0)
                {
                    ans.push_back(-1);
                }
                else{
                    ans.push_back(s.top());
                }
            }
            s.push(i);
        }
        return ans;
    }
    
    vector<long long> nextsmaller(long long *arr,int n)
    {
        vector<long long>ans;
        stack<int>s;
        
        for(int i=n-1;i>=0;i--)
        {
            if(s.size()==0)
            {
                ans.push_back(n);
            }
            else if(s.size()>0 && arr[s.top()]<arr[i])
            {
                ans.push_back(s.top());
            }
            else if(s.size()>0 && arr[s.top()]>=arr[i])
            {
                while(s.size()>0 && arr[s.top()]>=arr[i])
                {
                    s.pop();
                }
                if(s.empty())
                {
                    ans.push_back(n);
                }
                else{
                    ans.push_back(s.top());
                }
            }
            s.push(i);
        }
        reverse(ans.begin(),ans.end());
        return ans;
    }
    
    long long getMaxArea(long long arr[], int n)
    {
        // Your code here
        long long res=0;
        vector<long long>ps=prevsmaller(arr,n);
        vector<long long>ns=nextsmaller(arr,n);
        
        for(int i=0;i<n;i++)
        {
            long long curr=(ns[i]-ps[i]-1)*arr[i];
            res=max(res,curr);
        }
        return res;
        
    }
};
