



InterviewBit:- https://www.interviewbit.com/problems/4-sum/
leetcode:-  https://leetcode.com/problems/4sum/description/

------------------------------------------------------------------------------------------------------------------------------------------------------------
void twosum(vector<vector<int> > &ans,vector<int>A,int i,int n,int j,int target)
{
    int k=j+1;
    int l=n-1;
    
    while(k<l)
    {
        if(A[k]+A[l]>target)
        {
            l--;
        }
        else if(A[k]+A[l]<target)
        {
            k++;
        }
        else{
            ans.push_back({A[i],A[j],A[k],A[l]});
            while(k<n-1 && A[k]==A[k+1])k++;
            while(l>0 && A[l]==A[l-1])l--;
            k++;
            l--;
        }
    }
}
vector<vector<int> > Solution::fourSum(vector<int> &A, int B) {
    
    vector<vector<int> > ans;
    
    sort(A.begin(),A.end());
    int n=A.size();
    
    if(n<4){
        return ans;
    }
    
    for(int i=0;i<n-3;i++)
    {
        if(i>0 && A[i]==A[i-1])
        {
            continue;
        }
        for(int j=i+1;j<n-2;j++)
        {
            if(j>i+1 && A[j]==A[j-1]){
                continue;
            }
            
            int sumtarget=B-(A[i]+A[j]);
            twosum(ans,A,i,n,j,sumtarget);
        }
    }
    return ans;
}
-------------------------------------------------------------------------------------------------------------------------------------------------------------
LEETCODE SOLUTION:-
typedef long long int ll;
class Solution {
public:
void twosum(vector<vector<int>> &ans,vector<int> nums,int n,int i,int j,ll target){
    int k=j+1;
    int l=n-1;

    while(k<l)
    {
        if(ll(nums[k])+ll(nums[l])>target)
        {
            l--;
        }
        else if(ll(nums[k])+ll(nums[l])<target)
        {
            k++;
        }
        else{
            ans.push_back({nums[i],nums[j],nums[k],nums[l]});
            while(k<n-1 && nums[k]==nums[k+1])k++;
            while(l>0 && nums[l]==nums[l-1])l--;
            k++;
            l--;
        }
    }
}
    vector<vector<int>> fourSum(vector<int>& nums, int target) {
        
        vector<vector<int>>ans;
        sort(nums.begin(),nums.end());
        ll n=nums.size();


        if(n<4)
        {
            return ans; 
        }

        for(ll i=0;i<n-3;i++)
        {
            if(i>0 && nums[i]==nums[i-1])
            {
                continue;
            }
            if(ll(nums[i])+ll(nums[i+1])+ll(nums[i+2])+ll(nums[i+3])>target) break;
            for(ll j=i+1;j<n-2;j++)
            {
                if(j>i+1 && nums[j]==nums[j-1])
                {
                    continue;
                }
                ll targetsum=ll(target)-(ll(nums[i])+ll(nums[j]));
                twosum(ans,nums,n,i,j,targetsum);
            }
        }
        return ans;
    }
};
